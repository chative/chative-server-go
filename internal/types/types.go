// Code generated by goctl. DO NOT EDIT.
package types

type AddFriendReq struct {
	InviteCode string `json:"inviteCode"`
	UID        string `header:"x-uid"`
	DID        int    `header:"x-did"`
}

type AddFriendRes struct {
	Inviter string `json:"inviter"`
}

type LocationReq struct {
	XForwardedFor string `header:"X-Forwarded-For"`
}

type LocationRes struct {
	CountryName string `json:"countryName"`
	CountryCode string `json:"countryCode"`
	DialingCode string `json:"dialingCode"`
}

type AskFriendReq struct {
	Inviter string          `header:"x-uid"`
	DID     int             `header:"x-did"`
	Invitee string          `json:"uid"`
	Source  *FindFriendPath `json:"source,optional"`
	Action  string          `json:"action,optional"`
}

type FindFriendPath struct {
	Type    string `json:"type"`
	GroupID string `json:"groupID,optional"`
	UID     string `json:"uid,optional"`
}

type AskFriendRes struct {
	AskID int `json:"id"`
}

type FriendAgreeReq struct {
	Invitee string `header:"x-uid"`
	DID     int    `header:"x-did"`
	AskID   uint   `path:"id"`
}

type FriendAgreeRes struct {
}

type DelFriendReq struct {
	Operator string `header:"x-uid"`
	DID      int    `header:"x-did"`
	UID      string `path:"uid"`
}

type EmptyRes struct {
}

type Conversation struct {
	Ver           int    `json:"ver"`
	Conversation  string `json:"conversation"`
	MessageExpiry int64  `json:"messageExpiry"`
}

type FetchConversationRequest struct {
	UID           string   `header:"x-uid"`
	DID           int      `header:"x-did"`
	Conversations []string `json:"conversations"`
}

type FetchConversationResponse struct {
	Conversations []Conversation `json:"conversations"`
}

type UpdateConversationReq struct {
	UID           string `header:"x-uid"`
	DID           int    `header:"x-did"`
	Conversation  string `path:"id"`
	MessageExpiry int64  `json:"messageExpiry"`
}

type FetchSaltReq struct {
	UID string `header:"x-uid"`
	DID int    `header:"x-did"`
}

type FetchSaltResp struct {
	Salt string `json:"salt"`
}

type SetProfileReq struct {
	UID            string `header:"x-uid"`
	DID            int    `header:"x-did"`
	SearchByEmail  int    `json:"searchByEmail,optional,default=-1"`
	SearchByPhone  int    `json:"searchByPhone,optional,default=-1"`
	PasskeysSwitch int    `json:"passkeysSwitch,optional,default=-1"`
}

type ProfileResp struct {
	SearchByEmail  int `json:"searchByEmail"`
	SearchByPhone  int `json:"searchByPhone"`
	PasskeysSwitch int `json:"passkeysSwitch"`
}

type GetProfileReq struct {
	UID string `header:"x-uid"`
	DID int    `header:"x-did"`
}

type DirectorySearchReq struct {
	UID   string   `header:"x-uid"`
	DID   int      `header:"x-did"`
	Ver   int      `json:"ver"`
	Hashs []string `json:"hashs"`
}

type DirectorySearchRes struct {
	Results interface{} `json:"results"`
}

type QueryAccIdKeysReq struct {
	UID  string   `header:"x-uid"`
	DID  int      `header:"x-did"`
	UIDs []string `json:"uids"`
}

type QueryAccIdKeysResp struct {
	Keys           interface{} `json:"keys"`
	MeetingVersion int         `json:"meetingVersion"`
}

type GenInviteCodeReq struct {
	UID        string `header:"x-uid"`
	DID        int    `header:"x-did"`
	Regenerate int    `form:"regenerate,optional"`
	Short      int    `form:"short,optional,default=0"`
}

type GenInviteCodeRes struct {
	InviteCode string `json:"inviteCode"`
}

type QueryByInviteCodeReq struct {
	UID        string `header:"x-uid"`
	DID        int    `header:"x-did"`
	InviteCode string `json:"inviteCode"`
}

type QueryByInviteCodeRes struct {
	UID string `json:"uid"`
}

type UserInfoByInviteCodeReq struct {
	InviteCode string `form:"i"`
}

type UserInfoByInviteCodeRes struct {
	Name          string `json:"name"`
	AvatarContent string `json:"avatarContent"`
}

type GroupInviteInfoReq struct {
	InviteCode string `form:"i"`
}

type GroupInviteInfoRes struct {
	GroupName     string `json:"groupName"`
	InviterName   string `json:"inviterName"`
	AvatarContent string `json:"avatarContent"`
}

type CheckAccExistsReq struct {
	Email string `json:"email,optional"`
	Phone string `json:"phone,optional"`
}

type CheckAccExistsResp struct {
	Exists         bool   `json:"exists"`
	HasWebauthn    bool   `json:"hasWebauthn"`
	WebauthnUserID string `json:"webauthnUserID"`
}

type ReportAccReq struct {
	Informer string `header:"x-uid"`
	Suspect  string `json:"uid"`
	Type     int    `json:"type,optional"`
	Reason   string `json:"reason,optional"`
	Block    int    `json:"block,optional,default=-1"`
}

type ReportAccRes struct {
}

type CheckUpdateReq struct {
	UID        string `header:"x-uid"`
	DID        int    `header:"x-did"`
	CurVersion string `form:"version"`
}

type CheckUpdateRes struct {
	Update bool   `json:"update"`
	Force  bool   `json:"force"`
	Url    string `json:"url"`
	Notes  string `json:"notes"`
}

type WebauthnExistsReq struct {
	Email string `json:"email,optional"`
	Phone string `json:"phone,optional"`
}

type WebauthnExistsRes struct {
	UserID string `json:"userID"`
}

type WebauthnRegInitReq struct {
	ChatUID string `header:"x-uid"`
	DID     int    `header:"x-did"`
}

type WebauthnRP struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

type WebauthnUser struct {
	Name        string `json:"name"`
	DisplayName string `json:"displayName"`
	ID          string `json:"id"`
}

type WebauthnPubKeyCredParam struct {
	Type string `json:"type"`
	Alg  int    `json:"alg"`
}

type WebauthnAuthenticatorSelection struct {
	RequireResidentKey bool   `json:"requireResidentKey"`
	ResidentKey        string `json:"residentKey"`
	UserVerification   string `json:"userVerification"`
}

type WebauthnRegResPublic struct {
	Rp                     WebauthnRP                     `json:"rp"`
	User                   WebauthnUser                   `json:"user"`
	Challenge              string                         `json:"challenge"`
	PubKeyCredParams       []WebauthnPubKeyCredParam      `json:"pubKeyCredParams"`
	Timeout                int                            `json:"timeout"`
	AuthenticatorSelection WebauthnAuthenticatorSelection `json:"authenticatorSelection"`
	Attestation            string                         `json:"attestation"`
}

type WebauthnRegInitRes struct {
	PublicKey WebauthnRegResPublic `json:"publicKey"`
}

type WebauthnRegCliRes struct {
	ClientDataJSON    string   `json:"clientDataJSON"`
	AttestationObject string   `json:"attestationObject"`
	Transports        []string `json:"transports,optional"`
}

type WebauthnRegFinReq struct {
	ChatUID                 string            `header:"x-uid"`
	DID                     int               `header:"x-did"`
	Type                    string            `json:"type"`
	ID                      string            `json:"id"`
	RawID                   string            `json:"rawId"`
	AuthenticatorAttachment string            `json:"authenticatorAttachment,optional"`
	Response                WebauthnRegCliRes `json:"response"`
	Transports              []string          `json:"transports,optional"`
}

type WebauthnRegFinRes struct {
}

type WebauthnLoginInitReq struct {
	UserID string `json:"userID"`
}

type WebauthnLoginAllowCredential struct {
	Type string `json:"type"`
	ID   string `json:"id"`
}

type WebauthnLoginInitPK struct {
	Challenge        string                         `json:"challenge"`
	Timeout          int                            `json:"timeout"`
	RpID             string                         `json:"rpId"`
	AllowCredentials []WebauthnLoginAllowCredential `json:"allowCredentials"`
	UserVerification string                         `json:"userVerification"`
}

type WebauthnLoginInitRes struct {
	PublicKey WebauthnLoginInitPK `json:"publicKey"`
}

type WebauthnLoginCliRes struct {
	ClientDataJSON    string `json:"clientDataJson"`
	AuthenticatorData string `json:"authenticatorData"`
	Signature         string `json:"signature"`
	UserHandle        string `json:"userHandle"`
}

type WebauthnLoginFinReq struct {
	ID              string              `json:"id"`
	RawID           string              `json:"rawId"`
	Type            string              `json:"type"`
	Response        WebauthnLoginCliRes `json:"response"`
	UA              string              `header:"User-Agent"`
	SupportTransfer int                 `json:"supportTransfer,optional,default=0"`
}

type TransferTokens struct {
	Tdtoken    string `json:"tdtoken"`
	Logintoken string `json:"logintoken"`
}

type WebauthnLoginFinRes struct {
	Transferable     int            `json:"transferable"`
	Tokens           TransferTokens `json:"tokens"`
	VerificationCode string         `json:"verificationCode"`
	Account          string         `json:"account"`
	RequirePin       bool           `json:"requirePin"`
}

type CreateReminderReq struct {
	UID          string `header:"x-uid"`
	DID          int    `header:"x-did"`
	Conversation string `json:"conversation"`
	Type         string `json:"type"`
	Timezone     string `json:"timezone"`
	Timestamp    int64  `json:"timestamp"`
	Repeat       int    `json:"repeat"`
	Description  string `json:"description"`
}

type CreateReminderResp struct {
	ID           uint   `json:"reminderId"`
	Version      int    `json:"version"`
	Type         string `json:"type"`
	Creator      string `json:"creator,omitempty"`
	Timezone     string `json:"timezone"`
	Timestamp    int64  `json:"timestamp"`
	ModifyTime   int64  `json:"modifyTime"`
	Conversation string `json:"conversation"`
	Repeat       int    `json:"repeat"`
	Description  string `json:"description"`
}

type UpdateReminderReq struct {
	ID          uint   `path:"id"`
	UID         string `header:"x-uid"`
	DID         int    `header:"x-did"`
	Timezone    string `json:"timezone"`
	Timestamp   int64  `json:"timestamp"`
	Repeat      int    `json:"repeat"`
	Description string `json:"description"`
}

type UpdateReminderResp struct {
	ID           uint   `json:"reminderId"`
	Version      int    `json:"version"`
	Type         string `json:"type"`
	Timezone     string `json:"timezone"`
	Timestamp    int64  `json:"timestamp"`
	ModifyTime   int64  `json:"modifyTime"`
	Conversation string `json:"conversation"`
	Repeat       int    `json:"repeat"`
	Description  string `json:"description"`
}

type DeleteReminderReq struct {
	UID string `header:"x-uid"`
	DID int    `header:"x-did"`
	IDs string `path:"ids"`
}

type DeleteReminderResp struct {
}

type GetReminderReq struct {
	UID          string `header:"x-uid"`
	DID          int    `header:"x-did"`
	Conversation string `path:"conversation"`
	Type         string `form:"type"`
}

type GetReminderResp struct {
	List []CreateReminderResp `json:"list"`
}

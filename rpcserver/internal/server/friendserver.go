// Code generated by goctl. DO NOT EDIT!
// Source: friend.proto

package server

import (
	"context"

	"chative-server-go/rpcserver/internal/logic"
	"chative-server-go/rpcserver/internal/svc"
	"chative-server-go/rpcserver/pb"
)

type FriendServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedFriendServer
}

func NewFriendServer(svcCtx *svc.ServiceContext) *FriendServer {
	return &FriendServer{
		svcCtx: svcCtx,
	}
}

func (s *FriendServer) Add(ctx context.Context, in *pb.AddRequest) (*pb.AddResponse, error) {
	l := logic.NewAddLogic(ctx, s.svcCtx)
	return l.Add(in)
}

func (s *FriendServer) List(ctx context.Context, in *pb.ListRequest) (*pb.ListResponse, error) {
	l := logic.NewListLogic(ctx, s.svcCtx)
	return l.List(in)
}

func (s *FriendServer) Exist(ctx context.Context, in *pb.ExistRequest) (*pb.ExistResponse, error) {
	l := logic.NewExistLogic(ctx, s.svcCtx)
	return l.Exist(in)
}

func (s *FriendServer) HowToMet(ctx context.Context, in *pb.HowToMetRequest) (*pb.HowToMetResponse, error) {
	l := logic.NewHowToMetLogic(ctx, s.svcCtx)
	return l.HowToMet(in)
}

func (s *FriendServer) IsFriend(ctx context.Context, in *pb.IsFriendRequest) (*pb.IsFriendResponse, error) {
	l := logic.NewIsFriendLogic(ctx, s.svcCtx)
	return l.IsFriend(in)
}

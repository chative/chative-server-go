// Code generated by goctl. DO NOT EDIT!
// Source: account.proto

package server

import (
	"context"

	"chative-server-go/rpcserver/internal/logic"
	"chative-server-go/rpcserver/internal/svc"
	"chative-server-go/rpcserver/pb"
)

type AccountServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedAccountServer
}

func NewAccountServer(svcCtx *svc.ServiceContext) *AccountServer {
	return &AccountServer{
		svcCtx: svcCtx,
	}
}

func (s *AccountServer) SyncProfile(ctx context.Context, in *pb.SyncProfileRequest) (*pb.SyncProfileResponse, error) {
	l := logic.NewSyncProfileLogic(ctx, s.svcCtx)
	return l.SyncProfile(in)
}

func (s *AccountServer) GenEmailVerificationCode(ctx context.Context, in *pb.GenEmailVcodeRequest) (*pb.GenEmailVcodeResponse, error) {
	l := logic.NewGenEmailVerificationCodeLogic(ctx, s.svcCtx)
	return l.GenEmailVerificationCode(in)
}

func (s *AccountServer) CheckEmailVerificationCode(ctx context.Context, in *pb.CheckEmailVcodeRequest) (*pb.CheckEmailVcodeResponse, error) {
	l := logic.NewCheckEmailVerificationCodeLogic(ctx, s.svcCtx)
	return l.CheckEmailVerificationCode(in)
}

func (s *AccountServer) HashUserMeta(ctx context.Context, in *pb.HashUserMetaRequest) (*pb.HashUserMetaResponse, error) {
	l := logic.NewHashUserMetaLogic(ctx, s.svcCtx)
	return l.HashUserMeta(in)
}

func (s *AccountServer) InitUserProfile(ctx context.Context, in *pb.InitUserProfileRequest) (*pb.InitUserProfileResponse, error) {
	l := logic.NewInitUserProfileLogic(ctx, s.svcCtx)
	return l.InitUserProfile(in)
}

func (s *AccountServer) GetUserProfile(ctx context.Context, in *pb.GetUserProfileRequest) (*pb.GetUserProfileResponse, error) {
	l := logic.NewGetUserProfileLogic(ctx, s.svcCtx)
	return l.GetUserProfile(in)
}

func (s *AccountServer) DelUserHash(ctx context.Context, in *pb.DelUserHashRequest) (*pb.DelUserHashResponse, error) {
	l := logic.NewDelUserHashLogic(ctx, s.svcCtx)
	return l.DelUserHash(in)
}

func (s *AccountServer) DisableSearch(ctx context.Context, in *pb.DisableSearchRequest) (*pb.DisableSearchResponse, error) {
	l := logic.NewDisableSearchLogic(ctx, s.svcCtx)
	return l.DisableSearch(in)
}

func (s *AccountServer) DeleteAccount(ctx context.Context, in *pb.DeleteAccReq) (*pb.DeleteAccResp, error) {
	l := logic.NewDeleteAccountLogic(ctx, s.svcCtx)
	return l.DeleteAccount(in)
}

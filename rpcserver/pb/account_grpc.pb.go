// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: account.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountClient is the client API for Account service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountClient interface {
	SyncProfile(ctx context.Context, in *SyncProfileRequest, opts ...grpc.CallOption) (*SyncProfileResponse, error)
	GenEmailVerificationCode(ctx context.Context, in *GenEmailVcodeRequest, opts ...grpc.CallOption) (*GenEmailVcodeResponse, error)
	CheckEmailVerificationCode(ctx context.Context, in *CheckEmailVcodeRequest, opts ...grpc.CallOption) (*CheckEmailVcodeResponse, error)
	HashUserMeta(ctx context.Context, in *HashUserMetaRequest, opts ...grpc.CallOption) (*HashUserMetaResponse, error)
	InitUserProfile(ctx context.Context, in *InitUserProfileRequest, opts ...grpc.CallOption) (*InitUserProfileResponse, error)
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	DelUserHash(ctx context.Context, in *DelUserHashRequest, opts ...grpc.CallOption) (*DelUserHashResponse, error)
	DisableSearch(ctx context.Context, in *DisableSearchRequest, opts ...grpc.CallOption) (*DisableSearchResponse, error)
	DeleteAccount(ctx context.Context, in *DeleteAccReq, opts ...grpc.CallOption) (*DeleteAccResp, error)
}

type accountClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountClient(cc grpc.ClientConnInterface) AccountClient {
	return &accountClient{cc}
}

func (c *accountClient) SyncProfile(ctx context.Context, in *SyncProfileRequest, opts ...grpc.CallOption) (*SyncProfileResponse, error) {
	out := new(SyncProfileResponse)
	err := c.cc.Invoke(ctx, "/pb.Account/SyncProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GenEmailVerificationCode(ctx context.Context, in *GenEmailVcodeRequest, opts ...grpc.CallOption) (*GenEmailVcodeResponse, error) {
	out := new(GenEmailVcodeResponse)
	err := c.cc.Invoke(ctx, "/pb.Account/GenEmailVerificationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) CheckEmailVerificationCode(ctx context.Context, in *CheckEmailVcodeRequest, opts ...grpc.CallOption) (*CheckEmailVcodeResponse, error) {
	out := new(CheckEmailVcodeResponse)
	err := c.cc.Invoke(ctx, "/pb.Account/CheckEmailVerificationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) HashUserMeta(ctx context.Context, in *HashUserMetaRequest, opts ...grpc.CallOption) (*HashUserMetaResponse, error) {
	out := new(HashUserMetaResponse)
	err := c.cc.Invoke(ctx, "/pb.Account/HashUserMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) InitUserProfile(ctx context.Context, in *InitUserProfileRequest, opts ...grpc.CallOption) (*InitUserProfileResponse, error) {
	out := new(InitUserProfileResponse)
	err := c.cc.Invoke(ctx, "/pb.Account/InitUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, "/pb.Account/GetUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) DelUserHash(ctx context.Context, in *DelUserHashRequest, opts ...grpc.CallOption) (*DelUserHashResponse, error) {
	out := new(DelUserHashResponse)
	err := c.cc.Invoke(ctx, "/pb.Account/DelUserHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) DisableSearch(ctx context.Context, in *DisableSearchRequest, opts ...grpc.CallOption) (*DisableSearchResponse, error) {
	out := new(DisableSearchResponse)
	err := c.cc.Invoke(ctx, "/pb.Account/DisableSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) DeleteAccount(ctx context.Context, in *DeleteAccReq, opts ...grpc.CallOption) (*DeleteAccResp, error) {
	out := new(DeleteAccResp)
	err := c.cc.Invoke(ctx, "/pb.Account/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServer is the server API for Account service.
// All implementations must embed UnimplementedAccountServer
// for forward compatibility
type AccountServer interface {
	SyncProfile(context.Context, *SyncProfileRequest) (*SyncProfileResponse, error)
	GenEmailVerificationCode(context.Context, *GenEmailVcodeRequest) (*GenEmailVcodeResponse, error)
	CheckEmailVerificationCode(context.Context, *CheckEmailVcodeRequest) (*CheckEmailVcodeResponse, error)
	HashUserMeta(context.Context, *HashUserMetaRequest) (*HashUserMetaResponse, error)
	InitUserProfile(context.Context, *InitUserProfileRequest) (*InitUserProfileResponse, error)
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	DelUserHash(context.Context, *DelUserHashRequest) (*DelUserHashResponse, error)
	DisableSearch(context.Context, *DisableSearchRequest) (*DisableSearchResponse, error)
	DeleteAccount(context.Context, *DeleteAccReq) (*DeleteAccResp, error)
	mustEmbedUnimplementedAccountServer()
}

// UnimplementedAccountServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServer struct {
}

func (UnimplementedAccountServer) SyncProfile(context.Context, *SyncProfileRequest) (*SyncProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncProfile not implemented")
}
func (UnimplementedAccountServer) GenEmailVerificationCode(context.Context, *GenEmailVcodeRequest) (*GenEmailVcodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenEmailVerificationCode not implemented")
}
func (UnimplementedAccountServer) CheckEmailVerificationCode(context.Context, *CheckEmailVcodeRequest) (*CheckEmailVcodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEmailVerificationCode not implemented")
}
func (UnimplementedAccountServer) HashUserMeta(context.Context, *HashUserMetaRequest) (*HashUserMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HashUserMeta not implemented")
}
func (UnimplementedAccountServer) InitUserProfile(context.Context, *InitUserProfileRequest) (*InitUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitUserProfile not implemented")
}
func (UnimplementedAccountServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedAccountServer) DelUserHash(context.Context, *DelUserHashRequest) (*DelUserHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserHash not implemented")
}
func (UnimplementedAccountServer) DisableSearch(context.Context, *DisableSearchRequest) (*DisableSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableSearch not implemented")
}
func (UnimplementedAccountServer) DeleteAccount(context.Context, *DeleteAccReq) (*DeleteAccResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedAccountServer) mustEmbedUnimplementedAccountServer() {}

// UnsafeAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServer will
// result in compilation errors.
type UnsafeAccountServer interface {
	mustEmbedUnimplementedAccountServer()
}

func RegisterAccountServer(s grpc.ServiceRegistrar, srv AccountServer) {
	s.RegisterService(&Account_ServiceDesc, srv)
}

func _Account_SyncProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).SyncProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/SyncProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).SyncProfile(ctx, req.(*SyncProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GenEmailVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenEmailVcodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GenEmailVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/GenEmailVerificationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GenEmailVerificationCode(ctx, req.(*GenEmailVcodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_CheckEmailVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckEmailVcodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).CheckEmailVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/CheckEmailVerificationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).CheckEmailVerificationCode(ctx, req.(*CheckEmailVcodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_HashUserMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashUserMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).HashUserMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/HashUserMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).HashUserMeta(ctx, req.(*HashUserMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_InitUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).InitUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/InitUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).InitUserProfile(ctx, req.(*InitUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/GetUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_DelUserHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).DelUserHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/DelUserHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).DelUserHash(ctx, req.(*DelUserHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_DisableSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).DisableSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/DisableSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).DisableSearch(ctx, req.(*DisableSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).DeleteAccount(ctx, req.(*DeleteAccReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Account_ServiceDesc is the grpc.ServiceDesc for Account service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Account_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncProfile",
			Handler:    _Account_SyncProfile_Handler,
		},
		{
			MethodName: "GenEmailVerificationCode",
			Handler:    _Account_GenEmailVerificationCode_Handler,
		},
		{
			MethodName: "CheckEmailVerificationCode",
			Handler:    _Account_CheckEmailVerificationCode_Handler,
		},
		{
			MethodName: "HashUserMeta",
			Handler:    _Account_HashUserMeta_Handler,
		},
		{
			MethodName: "InitUserProfile",
			Handler:    _Account_InitUserProfile_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _Account_GetUserProfile_Handler,
		},
		{
			MethodName: "DelUserHash",
			Handler:    _Account_DelUserHash_Handler,
		},
		{
			MethodName: "DisableSearch",
			Handler:    _Account_DisableSearch_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _Account_DeleteAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
